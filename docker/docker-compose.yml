version: "3.8"

services:
  # GMO Board Watcher Bot
  gmo-board-watcher:
    build:
      context: ..
      dockerfile: bots/gmo_board_watcher/Dockerfile
    container_name: gmo-board-watcher
    env_file:
      - ../env/.env
      - ../env/.env.local
    environment:
      - PYTHONPATH=/app
      - GMO_SYMBOL=BTC_JPY
    volumes:
      - ../logs:/app/logs:rw
    restart: unless-stopped
    networks:
      - trading_network
    user: "1000:1000"

  # Sherrinford Bot
  sherrinford:
    build:
      context: ..
      dockerfile: bots/sherrinford/Dockerfile
    container_name: sherrinford
    env_file:
      - ../env/.env
      - ../env/.env.local
    environment:
      - PYTHONPATH=/app
      - BOT_NAME=sherrinford
    volumes:
      - ../logs:/app/logs:rw
      - ../data:/app/data:rw
    restart: unless-stopped
    networks:
      - trading_network
    depends_on:
      - postgres
      - redis
    user: "1000:1000"

  # Watson Bot
  watson:
    build:
      context: ..
      dockerfile: bots/watson/Dockerfile
    container_name: watson
    env_file:
      - ../env/.env
      - ../env/.env.local
    environment:
      - PYTHONPATH=/app
      - BOT_NAME=watson
    volumes:
      - ../logs:/app/logs:rw
      - ../data:/app/data:rw
    restart: unless-stopped
    networks:
      - trading_network
    depends_on:
      - postgres
      - redis
    user: "1000:1000"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres_trading
    environment:
      POSTGRES_DB: trading_dev
      POSTGRES_USER: trader
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - trading_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis_trading
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_redis_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading_network
    restart: unless-stopped

  # Grafana Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_trading
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-dev_grafana_123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ../config/grafana:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - trading_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  trading_network:
    driver: bridge
