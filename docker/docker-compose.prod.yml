version: "3.8"

services:
  # 本番環境用 Sherrinford
  sherrinford:
    build:
      context: ..
      dockerfile: docker/base.Dockerfile
    image: root-bot-production:latest
    container_name: sherrinford-prod
    env_file:
      - ../config/production.env # 本番環境設定
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - BOT_NAME=sherrinford
      - PYTHONOPTIMIZE=2
    volumes:
      - /opt/trading/logs/sherrinford:/app/logs:rw
      - /opt/trading/data/sherrinford:/app/data:rw
      - /opt/trading/cache/sherrinford:/app/data/cache:rw
      - /opt/trading/config/sherrinford.yml:/app/bots/sherrinford/config.yml:ro
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "2.0"
        reservations:
          memory: 512M
          cpus: "1.0"
    restart_policy:
      condition: any
      delay: 5s
      max_attempts: 3
      window: 120s
    networks:
      - prod_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "2"
    labels: "service=sherrinford,environment=production"
    command: ["python", "-O", "-m", "bots.sherrinford.main"]
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    read_only: false
    sysctls:
      - net.core.somaxconn=1024
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # Watson Bot（独立した二つ目以降のbot）
  watson-bot:
    build:
      context: ..
      dockerfile: docker/base.Dockerfile
    image: root-bot-production:latest
    container_name: watson-prod
    env_file:
      - ../config/production.env
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - LOG_LEVEL=ERROR
      - BOT_NAME=watson
      - PYTHONOPTIMIZE=2
    volumes:
      - /opt/trading/logs/watson:/app/logs:rw
      - /opt/trading/data/watson:/app/data:rw
      - /opt/trading/cache/watson:/app/data/cache:rw
      - /opt/trading/config/watson.yml:/app/bots/watson/config.yml:ro
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "2.0"
        reservations:
          memory: 512M
          cpus: "1.0"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - trading_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "2"
        labels: "service=watson,environment=production"
    command: ["python", "-O", "-m", "bots.watson.main"]
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    read_only: false
    sysctls:
      - net.core.somaxconn=1024
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # PostgreSQL（prod）
  postgres:
    image: postgres:15-alpine
    container_name: postgres-prod
    env_file:
      - ../config/production.env
    environment:
      POSTGRES_DB: trading_production
      POSTGRES_USER: trader_prod
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - /opt/trading/data/postgres:/var/lib/postgresql/data
      - /opt/trading/backups/postgres:/backups
      - ../sql/init.prod.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ../sql/schemas/:/docker-entrypoint-initdb.d/schemas/:ro
      - ../sql/functions.sql:/docker-entrypoint-initdb.d/functions.sql:ro
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "2.0"
        reservations:
          memory: 1G
          cpus: "1.0"
    networks:
      - prod_network
    # 高性能設定
    command: >
      postgres
      -c shared_buffers=512MB
      -c effective_cache_size=1536MB
      -c random_page_cost=1.1
      -c wal_buffers=32MB
      -c max_connections=50
      -c checkpoint_completion_target=0.9
      -c wal_level=replica
      -c max_wal_size=2GB
      -c min_wal_size=1GB
      -c log_statement=none
      -c log_min_duration_statement=1000
      -c autovacuum_vacuum_scale_factor=0.1
      -c maintenance_work_mem=256MB
      -c work_mem=16MB
      -c max_parallel_workers=4
      -c max_parallel_workers_per_gather=2
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    # セキュリティ設定
    user: "999:999"
    security_opt:
      - no-new-privileges:true
    # ports設定なし（内部通信のみ）

  # Redis(prod)
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    env_file:
      - ../config/production.env
    command: >
      redis-server /etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - /opt/trading/data/redis:/data
      - /opt/trading/config/redis.conf:/etc/redis/redis.conf:ro
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    networks:
      - prod_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"
    user: "999:999"
    security_opt:
      - no-new-privileges:true
    # ports設定なし（内部通信のみ）

# 名前付きボリューム（パフォーマンス最適化）
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trading/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trading/data/redis

# ネットワーク設定（セキュリティ最適化）
networks:
  trading_network:
    driver: bridge
    internal: true # 完全内部ネットワーク
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16
          gateway: 172.30.0.1
    driver_opts:
      com.docker.network.driver.mtu: 1500
      com.docker.network.bridge.name: br-trading-prod
    labels:
      - "environment=production"
      - "purpose=trading"
